
@{
    ViewData["Title"] = "AssignProject";
}
@*Link the ViewModel for AssignProject*@
@model WorkHourTracker.Web.Models.AssignProjectInput

<h2>Assign a Project</h2>

<p>Assign an employee to a project here.</p>

<br />

@*The code peeks at the TempData's "AssignedProjectSuccess" key to see if the value is not null
    If this is true then the application will foreach loop through the TempData's AssignedProjectSuccess object
    and displays each message*@
<div>
    @if (TempData.Peek("AssignedProjectSuccess") != null)
    {
        foreach (var message in (string[])TempData["AssignedProjectSuccess"])
        {
            <p style="color: green">@message</p>
        }
    }
</div>

<div>
    @if (TempData.Peek("AssignedProjectError") != null)
    {
        foreach (var message in (string[])TempData["AssignedProjectError"])
        {
            <p style="color: red">@message</p>
        }
    }
</div>
<div>
    @if (TempData.Peek("AssignProjectInvalid") != null)
    {
        foreach (var message in (string[])TempData["AssignProjectInvalid"])
        {
            <p style="color: red">@message</p>
        }
    }
</div>

@*Link the ViewModel for AssignProject*@
<form asp-action="SaveProjectAssignment" asp-controller="ProjectManager">
    <span>
        Assign:
        @*<label asp-for="AssignedProjectName"></label>*@
        <input asp-for="AssignedProjectName" type="text" placeholder="Project Name" />
        To:
        @*<label asp-for="AssignedUserName"></label>*@
        <input asp-for="AssignedUserName" type="text" placeholder="Employee's UserName" />
        Hours per Day:
        @*<label asp-for="Capacity"></label>*@
        <input asp-for="Capacity" type="number" placeholder="Employee's Hours" />
        <button type="submit" class="btn-success">Assign</button>
    </span>
</form>

